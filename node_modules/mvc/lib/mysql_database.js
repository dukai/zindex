var oo = require('./utils/oo'),
	mysql = require('mysql'),
	utils = require('./utils');


var MysqlDatabase = function(options){

	this._initMysqlDatabase(options);
};

MysqlDatabase.prototype = {
	_initMysqlDatabase: function(options){
		this.options = {
		};

		this.options = oo.mix(this.options, options);

		this.pool  = mysql.createPool(this.options);

	},
	/**
	 * 执行命令
	 * @param sql
	 * @param callback(err, result)
	 */
	query: function(sql, callback){
		if(!callback){
			callback = function(){};
		}
		this.pool.getConnection(function(err, connection){
			if(!err){
				connection.query(sql, callback);
                connection.release();
			}else{
				throw(err);
			}
		});
	},

	fetchRow: function(sql, callback){

		this.query(sql, function(err, rows){
			if(rows){
				callback(err, rows[0]);
			}else{
				utils.debug(sql);
				callback({message: "Result is null", code: "ERR_RESULT_NULL"}, null);
			}

		});
	},

	fetchAll: function(sql, callback){
		this.query(sql, callback);
	},

	insert: function(tableName, data, callback){
		var sql = "Insert into ?? set ?";
		var inserts = [tableName, data];
		sql = mysql.format(sql, inserts);
		this.query(sql, callback);
	},
    /**
     * 更新指定表
     * @param tableName
     * @param data
     * @param where
     * @param callback
     */
	update: function(tableName, data, where, callback){
		var sql = "Update ?? set ? where ?";
		var update = [tableName, data, where];
		sql = mysql.format(sql, update);
		this.query(sql, callback);
	},

	delete: function(tableName, where, callback){
		var sql = "delete from ?? where ?";
		var deletes = [tableName, where];
		sql = mysql.format(sql, deletes);
		this.query(sql, callback);
	}
};

MysqlDatabase.getInstance = function(options){

	if(!this._instance){
		this._instance = new MysqlDatabase(options);
	}

	return this._instance;
};

MysqlDatabase._instance = null;


module.exports = MysqlDatabase;