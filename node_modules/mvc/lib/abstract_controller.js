var stringTools = require('./utils/string'),
    formidable = require('formidable'),
    View = require('./view'),
	MysqlDatabase = require('./mysql_database'),
    Config = require('./config');

var AbstractController = function(intent){
	this._initAbstractController(intent);
};

AbstractController.prototype = {
    /**
     * 重载需回调
     * @param dispatchActionCallback
     * @private
     */
	_init: function(dispatchActionCallback){
        dispatchActionCallback(true);
	},

	_initAbstractController: function(intent){
        this.intent = intent;
        this.statusCode = intent.statusCode || 200;
		this.renderScriptStatus = true;
		this.request = intent.request;
		this.response = intent.response;
		this.params = intent.params;
		this.controllerName = intent.controllerName;
		this.actionName = stringTools.dashToCamel(intent.actionName) + 'Action';
		this.view = new View(intent);
		this.db = null;
        this.setHeader("Content-Type", 'text/html; charset=utf-8');
	},
	run: function(){
        var self = this;
        this._init(function(status){
            self.dispatchAction();
        });
	},

    dispatchAction: function(){
        if(this[this.actionName]){
            this[this.actionName]();
            this.renderScriptStatus && this.render();
        }else{
            this.forward({
                controllerName: 'error',
                actionName: 'index',
                url: '/error/index',
                request: this.request,
                response: this.response,
                params: {status: 404, message: 'Action NOT Found!', info: this.intent}
            });
        }
    },

	render: function (){
		var self = this;
		this.view.renderScript(function(viewContent){
			self.response.writeHead(self.statusCode);
			self.response.end(viewContent);
		});
	},

	json: function(content){
		this.response.writeHead(this.statusCode, {'Content-Type': 'application/json;charset=utf-8'})
		this.response.end(JSON.stringify(content));
	},
	/**
	 * 直接输出内容
	 * @param value
	 * @param statusCode
	 */
	exit: function(value, statusCode){
		if(statusCode){
			this.statusCode = statusCode;
		}
		this.setNoRender();
		this.response.writeHead(this.statusCode);
		this.response.end(value);
	},

	getDb: function(){
		if(!this.db){
			this.db = MysqlDatabase.getInstance(Config.db);
		}
		return this.db;
	},

	setNoRender: function(){
		this.renderScriptStatus = false;
        this.setHeader("Content-Type", 'text/plain; charset=utf-8')
	},
    /**
     * 设置Header
     * @param name
     * @param value
     */
    setHeader: function(name, value){
        this.response.setHeader(name, value);
    },
    /**
     * 获取原始POST数据
     * @param callback(error, data)
     */
    getRawPost: function(callback){
        if(this.request.method == "POST" || this.request.method == "PUT"){
            var postData = '';
            this.request.addListener('data', function(chunk){
                postData += chunk;
            });

            this.request.addListener('end', function(){
                callback(null, postData);
            });
        }else{
            callback('NOT POST', null);
        }
    },
    /**
     * 获取表单数据
     * @param callback(err, fields, files)
     */
    getPost: function(callback){
        if(this.request.method == "POST"){
            var form = new formidable.IncomingForm();
            form.parse(this.request, function(err, fields, files) {
                callback(err, fields, files);
            });
        }else{
            callback('NOT POST', null, null);
        }

    },

	getParam: function(key, defaultValue){
		if(this.params[key]){
			return this.params[key];
		}else{
			return defaultValue;
		}
	},

    forward: function(intent){
        var route = require('mvc/lib/route');
        route.forward(intent);
    },

    redirect: function(url){
        this.response.writeHead(302, {
            'Location': url
        });
        this.response.end();

    }
};

module.exports = AbstractController;
